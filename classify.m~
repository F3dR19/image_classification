function [ score ] = classify( features_train, features_test, labels_train, labels_test, k ) 
% Classifies test images and computes classification score
%
%
% Input:
	features_train = reduced images ()
	features_test =
	labels_train =
	labels_test =
	k =  


% Search for the k closest neighbour (in euclidean sense)
[ neighbours ] = knnsearch(features_train', features_test','K',k,...
    'NSMethod','kdtree','Distance','euclidean');

% find the most recurring label of the closest neighbours (that's how the classification is done, basically)
classifications = mode( labels_train( neighbours ), 2 );

% score is evaluated as hit / total
score = sum( classifications == labels_test ) / numel( classifications );

end